/* 
use("alquiler_campus");
db.createCollection('sucursal', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Sucursal","Nombre","Direccion","Telefono"],
            properties:{
                ID_Sucursal:{
                    bsonType:"int",
                    description:"El campo ID_Sucursal debe ser de tipo int"
                },
                Nombre:{
                    bsonType:"string",
                    description:"El campo Nombre debe ser de tipo string"
                },
                Direccion:{
                    bsonType:"string",
                    description:"El campo Direccion debe ser de tipo string",
                },
                Telefono:{
                    bsonType:"string",
                    description:"El campo Telefono debe ser de tipo string"
                }
            }
        }
    }
});
use("alquiler_campus");
db.createCollection('sucursal_automovil', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Sucursal","ID_Automovil","Cantidad_Disponible"],
            properties:{
                ID_Sucursal:{
                    bsonType:"int",
                    description:"El campo ID_Sucursal debe ser de tipo int"
                },
                ID_Automovil:{
                    bsonType:"int",
                    description:"El campo ID_Automovil debe ser de tipo int"
                },
                Cantidad_Disponible:{
                    bsonType:"int",
                    description:"El campo Cantidad_Disponible debe ser de tipo int",
                }
            }
        }
    }
});
use("alquiler_campus");
db.createCollection('reserva', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Reserva","ID_Cliente","ID_Automovil","Fecha_Reserva","Fecha_Inicio","Fecha_Fin","Estado"],
            properties:{
                ID_Reserva:{
                    bsonType:"int",
                    description:"El campo ID_Reserva debe ser de tipo int"
                },
                ID_Cliente:{
                    bsonType:"int",
                    description:"El campo ID_Cliente debe ser de tipo int"
                },
                ID_Automovil:{
                    bsonType:"int",
                    description:"El campo ID_Automovil debe ser de tipo int",
                },
                Fecha_Reserva:{
                    bsonType:"string",
                    description:"El campo Fecha_Reserva debe ser de tipo string",
                },
                Fecha_Inicio:{
                    bsonType:"string",
                    description:"El campo Fecha_Inicio debe ser de tipo string",
                },
                Fecha_Fin:{
                    bsonType:"string",
                    description:"El campo Fecha_Fin debe ser de tipo string",
                },
                Estado:{
                    bsonType:"string",
                    description:"El campo Estado debe ser de tipo string",
                }
            }
        }
    }
});
use("alquiler_campus");
db.createCollection('automovil', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Automovil","Marca","Modelo","Anio","Tipo","Capacidad","Precio_Diario"],
            properties:{
                ID_Automovil:{
                    bsonType:"int",
                    description:"El campo ID_Automovil debe ser de tipo int"
                },
                Marca:{
                    bsonType:"string",
                    description:"El campo Marca debe ser de tipo string"
                },
                Modelo:{
                    bsonType:"int",
                    description:"El campo Modelo debe ser de tipo int",
                },
                Anio:{
                    bsonType:"int",
                    description:"El campo Anio debe ser de tipo int",
                },
                Tipo:{
                    bsonType:"string",
                    description:"El campo Tipo debe ser de tipo string",
                },
                Capacidad:{
                    bsonType:"int",
                    description:"El campo Capacidad debe ser de tipo int",
                },
                Precio_Diario:{
                    bsonType:"string",
                    description:"El campo Precio_Diario debe ser de tipo string",
                }
            }
        }
    }
});
use("alquiler_campus");
db.createCollection('cliente', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Cliente","Nombre","Apellido","DNI","Direccion","Telefono","Email"],
            properties:{
                ID_Cliente:{
                    bsonType:"int",
                    description:"El campo ID_Cliente debe ser de tipo int"
                },
                Nombre:{
                    bsonType:"string",
                    description:"El campo Nombre debe ser de tipo string"
                },
                Apellido:{
                    bsonType:"string",
                    description:"El campo Apellido debe ser de tipo string",
                },
                DNI:{
                    bsonType:"string",
                    description:"El campo DNI debe ser de tipo string",
                },
                Direccion:{
                    bsonType:"string",
                    description:"El campo Direccion debe ser de tipo string",
                },
                Telefono:{
                    bsonType:"string",
                    description:"El campo Telefono debe ser de tipo string",
                },
                Email:{
                    bsonType:"string",
                    description:"El campo Email debe ser de tipo string",
                }
            }
        }
    }
});
use("alquiler_campus");
db.createCollection('cliente', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Cliente","Nombre","Apellido","DNI","Direccion","Telefono","Email"],
            properties:{
                ID_Cliente:{
                    bsonType:"int",
                    description:"El campo ID_Cliente debe ser de tipo int"
                },
                Nombre:{
                    bsonType:"string",
                    description:"El campo Nombre debe ser de tipo string"
                },
                Apellido:{
                    bsonType:"string",
                    description:"El campo Apellido debe ser de tipo string",
                },
                DNI:{
                    bsonType:"string",
                    description:"El campo DNI debe ser de tipo string",
                },
                Direccion:{
                    bsonType:"string",
                    description:"El campo Direccion debe ser de tipo string",
                },
                Telefono:{
                    bsonType:"string",
                    description:"El campo Telefono debe ser de tipo string",
                },
                Email:{
                    bsonType:"string",
                    description:"El campo Email debe ser de tipo string",
                }
            }
        }
    }
});

use("alquiler_campus");
db.createCollection('alquiler', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Alquiler","ID_Cliente","ID_Automovil","Fecha_Inicio","Fecha_Fin","Costo_Total","Estado"],
            properties:{
                ID_Alquiler:{
                    bsonType:"int",
                    description:"El campo ID_Alquiler debe ser de tipo int"
                },
                ID_Cliente:{
                    bsonType:"int",
                    description:"El campo ID_Cliente debe ser de tipo int"
                },
                ID_Automovil:{
                    bsonType:"int",
                    description:"El campo ID_Automovil debe ser de tipo int",
                },
                Fecha_Inicio:{
                    bsonType:"string",
                    description:"El campo Fecha_Inicio debe ser de tipo string",
                },
                Fecha_Fin:{
                    bsonType:"string",
                    description:"El campo Fecha_Fin debe ser de tipo string",
                },
                Costo_Total:{
                    bsonType:"string",
                    description:"El campo Costo_Total debe ser de tipo string",
                },
                Estado:{
                    bsonType:"string",
                    description:"El campo Estado debe ser de tipo string",
                }
            }
        }
    }
});

use("alquiler_campus");
db.createCollection('registro_entrega', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Registro","ID_Alquiler","ID_Empleado","Fecha_Entrega","Combustible_Entregado","Kilometraje_Entregado"],
            properties:{
                ID_Registro:{
                    bsonType:"int",
                    description:"El campo ID_Registro debe ser de tipo int"
                },
                ID_Alquiler:{
                    bsonType:"int",
                    description:"El campo ID_Alquiler debe ser de tipo int"
                },
                ID_Empleado:{
                    bsonType:"int",
                    description:"El campo ID_Empleado debe ser de tipo int",
                },
                Fecha_Entrega:{
                    bsonType:"string",
                    description:"El campo Fecha_Entrega debe ser de tipo string",
                },
                Combustible_Entregado:{
                    bsonType:"string",
                    description:"El campo Combustible_Entregado debe ser de tipo string",
                },
                Kilometraje_Entregado:{
                    bsonType:"string",
                    description:"El campo Kilometraje_Entregado debe ser de tipo string",
                }
            }
        }
    }
});

use("alquiler_campus");
db.createCollection('registro_devolucion', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Registro","ID_Alquiler","ID_Empleado","Fecha_Devolucion","Combustible_Devuelto","Monto_Adicional"],
            properties:{
                ID_Registro:{
                    bsonType:"int",
                    description:"El campo ID_Registro debe ser de tipo int"
                },
                ID_Alquiler:{
                    bsonType:"int",
                    description:"El campo ID_Alquiler debe ser de tipo int"
                },
                ID_Empleado:{
                    bsonType:"int",
                    description:"El campo ID_Empleado debe ser de tipo int",
                },
                Fecha_Devolucion:{
                    bsonType:"string",
                    description:"El campo Fecha_Devolucion debe ser de tipo string",
                },
                Combustible_Devuelto:{
                    bsonType:"string",
                    description:"El campo Combustible_Devuelto debe ser de tipo string",
                },
                Monto_Adicional:{
                    bsonType:"string",
                    description:"El campo Monto_Adicional debe ser de tipo string",
                }
            }
        }
    }
});


use("alquiler_campus");
db.createCollection('empleado', {
    validator:{
        $jsonSchema:{
            bsonType:'object',
            required:["ID_Empleado","Nombre","Apellido","DNI","Direccion","Telefono","Cargo"],
            properties:{
                ID_Empleado:{
                    bsonType:"int",
                    description:"El campo ID_Empleado debe ser de tipo int"
                },
                Nombre:{
                    bsonType:"string",
                    description:"El campo Nombre debe ser de tipo string"
                },
                Apellido:{
                    bsonType:"string",
                    description:"El campo Apellido debe ser de tipo string",
                },
                DNI:{
                    bsonType:"string",
                    description:"El campo DNI debe ser de tipo string",
                },
                Direccion:{
                    bsonType:"string",
                    description:"El campo Direccion debe ser de tipo string",
                },
                Telefono:{
                    bsonType:"string",
                    description:"El campo Telefono debe ser de tipo string",
                },
                Cargo:{
                    bsonType:"string",
                    description:"El campo Cargo debe ser de tipo string",
                }
            }
        }
    }
});

//Insercion de registros en las colecciones 
use("alquiler_campus")
db.sucursal.insertOne({
    ID_Sucursal:1,
    Nombre:"Eduardo",
    Direccion:"Lebrija Santander",
    Telefono:"3167967956"
})

use("alquiler_campus")
db.sucursal_automovil.insertOne({
    ID_Sucursal:1,
    ID_Automovil:1,
    Cantidad_Disponible:5
})

use("alquiler_campus")
db.reserva.insertOne({
    ID_Reserva:1,
    ID_Cliente:1,
    ID_Automovil:1,
    Fecha_Reserva:"10-10-2023",
    Fecha_Inicio:"15-10-2023",
    Fecha_Fin:"12-12-2023",
    Estado:"Reservado"
})

use("alquiler_campus");
db.automovil.insertOne({
    ID_Automovil:1,
    Marca:"Chevrolet",
    Modelo:2024,
    Anio:2024,
    Tipo:"Camioneta",
    Capacidad:8,
    Precio_Diario:"25000"
})

use("alquiler_campus");
db.cliente.insertOne({
    ID_Cliente:1,
    Nombre:"Eduardo",
    Apellido:"Mantilla",
    DNI:"82628FA",
    Direccion:"Lebrija Santander",
    Telefono:"3167967956",
    Email:"eduardoma876@gmail.com"
})

use("alquiler_campus");
db.alquiler.insertOne({
    ID_Alquiler:1,
    ID_Cliente:1,
    ID_Automovil:1,
    Fecha_Inicio:"10-11-2023",
    Fecha_Fin:"15-12-2023",
    Costo_Total:"6500000",
    Estado:"Prestado"
})

use("alquiler_campus");
db.registro_entrega.insertOne({
    ID_Registro:1,
    ID_Alquiler:1,
    ID_Empleado:1,
    Fecha_Entrega:"15-12-2023",
    Combustible_Entregado:"3.5 Galones",
    Kilometraje_Entregado:"150000"
})

use("alquier_campus");
db.empleado.insertOne({
    ID_Empleado:1,
    Nombre:"Eduardo",
    Apellido:"Mantilla",
    DNI:"9874F",
    Direccion:"Lebrija Santander",
    Telefono:"3167967956",
    Cargo:"Gerente"
})

use("alquiler_campus");
db.registro_devolucion.insertOne({
    ID_Registro:1,
    ID_Alquiler:1,
    ID_Empleado:1,
    Fecha_Devolucion:"20-12-2023",
    Combustible_Devuelto:"2.5 Galones",
    Monto_Adicional:"25000"
})

*/

//2. Mostrar todos los clientes registrados en la base de datos.
use ("db_campus_alquiler");
db.cliente.aggregate([
    {
        $project: {
          "_id":0
        }
    }
]);

//3. Obtener todos los automóviles disponibles para alquiler.
use ("db_campus_alquiler");
db.alquiler.aggregate([
    {
        $match:{
            Estado:{$eq:"Disponible"}
        }
    },
    {
        $project: {
            "_id":0
        }
    }
]);

/*4. Listar todos los alquileres activos junto con los datos de los
clientes relacionados.*/
use ("db_campus_alquiler");
db.alquiler.aggregate([
    {
        $lookup: {
          from: "cliente",
          localField: "ID_Cliente",
          foreignField: "ID_Cliente",
          as: "dataCliente"
        }
    },
    {
        $match: {
          "Estado":{$eq: "Disponible"}
        }
    },
    {
        $project:{
            "_id":0,
            "Estado":0,
            "ID_Cliente":0,
            "dataCliente._id":0,
            "dataCliente.DNI":0,
            "dataCliente.Direccion":0,
            "dataCliente.Telefono":0,
            "dataCliente.Email":0
        }
    }
]);

/*5. Mostrar todas las reservas pendientes con los datos del cliente 
y el automóvil reservado. */
use ("db_campus_alquiler");
db.reserva.aggregate([
    {
        $lookup: {
          from: "automovil",
          localField: "ID_Automovil",
          foreignField: "ID_Automovil",
          as: "dataAutomovil"
        }
    },
    {
        $lookup:{
            from: "cliente",
            localField:"ID_Cliente",
            foreignField:"ID_Cliente",
            as:"dataCliente"
        }
    },
    {
        $project: {
            "_id":0,
            "dataAutomovil._id":0,
            "dataCliente._id":0,
        }
    },
    {
        $match: {
            "Estado":{$eq: "Pendientes"}
        }
    }
])

//6. Obtener los detalles del alquiler con el ID_Alquiler específico.
let idAlquiler=34;
use ("db_campus_alquiler");
db.alquiler.aggregate([
    {
        $project: {
            "_id":0
        }
    },
    {
        $match: {
            "ID_Alquiler":idAlquiler
        }
    }
])

//7. Listar los empleados con el cargo de "Vendedor"
use("db_campus_alquiler");
db.empleado.aggregate([
    {
        $project: {
          "_id":0
        }
    },
    {
        $match: {
            "Cargo":"Vendedor"
        }
    }
])

/*8. Mostrar la cantidad total de automóviles disponibles en cada 
sucursal.*/
use("db_campus_alquiler");
db.sucursal.aggregate([
    {
        $lookup: {
          from: "sucursal_automovil",
          localField: "ID_Sucursal",
          foreignField: "ID_Sucursal",
          as: "data_Sucursal"
        }
    },
    {
        $unwind: "$data_Sucursal"
    },
    {
        $group: {
          _id: "$data_Sucursal.ID_Sucursal",
          total_Automoviles: {$sum: "$data_Sucursal.Cantidad_Disponible"}
        }
    },
    {
        $project: {
          "_id": 0,
          "ID_Sucursal": "$_id",
          "Nombre": 1,
          "Total_Automoviles": "$total_Automoviles"
        }
    },
    { $sort: { ID_Sucursal: 1 } }
]);

//8. Obtener el costo total de un alquiler específico. 
use("db_campus_alquiler");
db.alquiler.find({ID_Alquiler: 34},{_id:0, ID_Alquiler:1, Costo_Total:1});

//9.Listar los clientes con el DNI específico. 
use("db_campus_alquiler");
db.cliente.find({DNI: "4451448F"},{_id:0, ID_Cliente:1, Nombre:1, Apellido:1, DNI:1, Telefono:1});

//10. Mostrar todos los automóviles con una capacidad mayor a 5 personas.
use("db_campus_alquiler");
db.automovil.find({ Capacidad: { $gte: 5 } },{_id:0,});

//11. Obtener los detalles del alquiler que tiene fecha de inicio en '2023-07-05'.
use("db_campus_alquiler");
db.alquiler.find({Fecha_Inicio:'2023-07-05'},{_id:0});

//12. Listar las reservas pendientes realizadas por un cliente específico. 
use("db_campus_alquiler");
db.reserva.find({ID_Cliente: 456, Estado: "Pendientes"});

//13. Mostrar los empleados con cargo de "Gerente" o "Asistente".
use("db_campus_alquiler");
db.empleado.find({ Cargo:{ $in: ["Gerente", "Asistente"]}});

//14. Obtener los datos de los clientes que realizaron al menos un alquiler.
use("db_campus_alquiler");
db.cliente.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "ID_Cliente",
            foreignField: "ID_Cliente",
            as: "data_Alquiler"
        }
    },
    {
        $project: {
            "_id" : 0,
            "Direccion" : 0,
            "Telefono":0,
            "Email":0,
            "data_Alquiler._id":0,
            "data_Alquiler.ID_Cliente":0,
            "data_Alquiler.Costo_Total":0,
        }
    },
    {
        $match: {
            data_Alquiler: { $ne: [] }
        }
    }
]);

//15. Listar todos los automóviles ordenados por marca y modelo.
use("db_campus_alquiler");
db.automovil.aggregate([
    {
        $project:{
            "_id": 0,
        }
    },
    {
        $sort:{
            "Marca": 1,
            "Modelo": 1
        }
    }
]);

//16. Mostrar la cantidad total de automóviles en cada sucursal junto con su dirección.
use("db_campus_alquiler");
db.sucursal.aggregate([
    {
        $lookup: {
          from: "sucursal_automovil",
          localField: "ID_Sucursal",
          foreignField: "ID_Sucursal",
          as: "data_Automoviles"
        }
    },
    {
        $addFields: {
          "total_Automoviles": { $sum: "$data_Automoviles.Cantidad_Disponible" }
        }
    },
    {
        $project: {
          "_id": 0,
          "Telefono": 0,
          "data_Automoviles._id": 0,
          "data_Automoviles.ID_Sucursal": 0,
        }
    }
]);

//17. Obtener la cantidad total de alquileres registrados en la base de datos. 
use("db_campus_alquiler");
db.alquiler.countDocuments();

//18. Mostrar los automóviles con capacidad igual a 5 personas y que estén disponibles. 
use("db_campus_alquiler");
db.automovil.aggregate([
    {
        $lookup: {
          from: "alquiler",
          localField: "ID_Automovil",
          foreignField: "ID_Automovil",
          as: "data_Alquiler"
        }
    },
    {
        $match: {
          "data_Alquiler.Estado":"Disponible",
          "Capacidad":{$gte: 5}
        }
    },
    {
        $project: {
          "_id":0,
          "data_Alquiler._id": 0,
          "data_Alquiler.ID_Automovil_id": 0
        }
    }
]);

//19. Listar los alquileres con fecha de inicio entre '2023-07-05' y '2023-07-10'
use("db_campus_alquiler");
db.alquiler.aggregate([
    {
        $match: {
            Fecha_Inicio: {
                $gte: "2023-07-05",
                $lte: "2023-07-10"
            }
        }
    },
    { $project: {"_id":0} },
    { $sort: {Fecha_Inicio: 1}}
]);